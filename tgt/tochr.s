;
; File generated by cc65 v 2.18 - Git 2f3955d
;
	.fopt		compiler,"cc65 v 2.18 - Git 2f3955d"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_tochr

_in = ptr2
_out = ptr3
_out16 = ptr4
_y = tmp3

; ---------------------------------------------------------------
; void tochr(const u8 *in, u8 * const out);
; ---------------------------------------------------------------

.segment "RODATA"

invbits:
	.byte 1 << 7
	.byte 1 << 6
	.byte 1 << 5
	.byte 1 << 4
	.byte 1 << 3
	.byte 1 << 2
	.byte 1 << 1
	.byte 1 << 0

tab:
	.addr val0, val1, val2, val3
	.addr val4, val5, val6, val7
	.addr val8, val9, val10, val11
	.addr val12, val13, val14, val15

.segment	"CODE"

.macro put1
	ldy     _y

	lda	(_out),y
	ora	invbits,x
	sta	(_out),y
.endmac

.macro put2
	ldy     _y
	iny

	lda	(_out),y
	ora	invbits,x
	sta	(_out),y
.endmac

.macro put4
	ldy     _y

	lda	(_out16),y
	ora	invbits,x
	sta	(_out16),y
.endmac

.macro put8
	ldy     _y
	iny

	lda	(_out16),y
	ora	invbits,x
	sta	(_out16),y
.endmac

val0:
	plx
	jmp done
val1:
	plx
	put1
	jmp done
val2:
	plx
	put2
	jmp done
val3:
	plx
	put1
	put2
	jmp done
val4:
	plx
	put4
	jmp done
val5:
	plx
	put1
	put4
	jmp done
val6:
	plx
	put2
	put4
	jmp done
val7:
	plx
	put1
	put2
	put4
	jmp done
val8:
	plx
	put8
	jmp done
val9:
	plx
	put1
	put8
	jmp done
val10:
	plx
	put2
	put8
	jmp done
val11:
	plx
	put1
	put2
	put8
	jmp done
val12:
	plx
	put4
	put8
	jmp done
val13:
	plx
	put1
	put4
	put8
	jmp done
val14:
	plx
	put2
	put4
	put8
	jmp done
val15:
	plx
	put1
	put2
	put4
	put8
	jmp done

_tochr:

	sta	_out
	stx	_out+1

	clc
	adc	#16
	sta	_out16
	txa
	adc	#0
	sta	_out16+1

	jsr	popax
	sta	_in
	stx	_in+1
;
; memset(out, 0, 32);
;
	lda     #$00
	ldy     #$0F
L003A:	sta     (_out),y
	sta	(_out16),y
	dey
	bpl     L003A
;
; for (y = 0; y < 8; y++) {
;
	lda	#0
L003F:	sta     _y
	cmp     #16
	bcc     L0048
;
; }
;
	rts
;
; for (x = 0; x < 8; x++) {
;
L0048:	ldx	#0
L0040:	cpx     #$08
	jcs     L0047
;
; const u8 pix = *in++;
;
	lda	(_in)
	asl
	phx
	tax

	inc	_in
	bne	@noinc
	inc	_in+1
@noinc:
	jmp	(tab,x)
done:
;
; for (x = 0; x < 8; x++) {
;
	inx
	jmp     L0040
;
; for (y = 0; y < 8; y++) {
;
L0047:	lda	_y
	ina
	ina
	jmp     L003F
