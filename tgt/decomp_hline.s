;
; File generated by cc65 v 2.18 - Git 2f3955d
;
	.fopt		compiler,"cc65 v 2.18 - Git 2f3955d"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_decomp_hline

.segment	"BSS"

_in = ptr2
_out = ptr3
_orig = ptr4
_val = tmp1
_i = tmp2
_highline = regsave

; ---------------------------------------------------------------
; u8 decomp_hline(const u8 *in, u8 *out);
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_decomp_hline: near

	sta	_out
	stx	_out+1

	jsr	popax
	sta	_in
	sta	_orig
	stx	_in+1
	stx	_orig+1
;
; orig = in;
;
;
; val = *in++;
;
	lda	(_in)
	sta	_val
	inc	_in
	bne	:+
	inc	_in+1
:
;
; memcpy(highline, in, 4);
;
	lda	(_in)
	sta	_highline
	ldy	#1
	lda	(_in),y
	sta	_highline+1
	iny
	lda	(_in),y
	sta	_highline+2
	iny
	lda	(_in),y
	sta	_highline+3
;
; in += 4;
;
	lda     #$04
	clc
	adc     _in
	sta     _in
	bcc     L000E
	inc     _in+1
;
; for (i = 0; i < 8; i++) {
;
L000E:	stz     _i
L005F:	lda     _i
	cmp     #$08
	jcs     L0010
;
; if (val & (1 << i)) {
;
	lda     _val
	and     #1
	jeq     L0017
;
; *out++ = highline[0] & 15;
;
	lda     _highline
	tay
	and     #$0F
	sta	(_out)
	inc	_out
	bne	:+
	inc	_out+1
:
;
; *out++ = highline[0] >> 4;
;
	tya
	lsr
	lsr
	lsr
	lsr
	sta	(_out)
	inc	_out
	bne	:+
	inc	_out+1
:
;
; *out++ = highline[1] & 15;
;
	lda	_highline+1
	tay
	and	#$0F
	sta	(_out)
	inc	_out
	bne	:+
	inc	_out+1
:
;
; *out++ = highline[1] >> 4;
;
	tya
	lsr
	lsr
	lsr
	lsr
	sta	(_out)
	inc	_out
	bne	:+
	inc	_out+1
:
;
; *out++ = highline[2] & 15;
;
	lda	_highline+2
	tay
	and	#$0F
	sta	(_out)
	inc	_out
	bne	:+
	inc	_out+1
:
;
; *out++ = highline[2] >> 4;
;
	tya
	lsr
	lsr
	lsr
	lsr
	sta	(_out)
	inc	_out
	bne	:+
	inc	_out+1
:
;
; *out++ = highline[3] & 15;
;
	lda	_highline+3
	tay
	and	#$0F
	sta	(_out)
	inc	_out
	bne	:+
	inc	_out+1
:
;
; *out++ = highline[3] >> 4;
;
	tya
	lsr
	lsr
	lsr
	lsr
	sta	(_out)
	inc	_out
	bne	:+
	inc	_out+1
:
;
; } else {
;
	jmp     L0060
;
; *out++ = in[0] & 15;
;
L0017:	lda     (_in)
	tax
	and	#$0F
	sta	(_out)
	inc	_out
	bne	:+
	inc	_out+1
:
;
; *out++ = in[0] >> 4;
;
	txa
	lsr
	lsr
	lsr
	lsr
	sta	(_out)
	inc	_out
	bne	:+
	inc	_out+1
:
;
; *out++ = in[1] & 15;
;
	ldy	#1
	lda	(_in),y
	tax
	and	#$0F
	sta	(_out)
	inc	_out
	bne	:+
	inc	_out+1
:
;
; *out++ = in[1] >> 4;
;
	txa
	lsr
	lsr
	lsr
	lsr
	sta	(_out)
	inc	_out
	bne	:+
	inc	_out+1
:
;
; *out++ = in[2] & 15;
;
	iny
	lda	(_in),y
	tax
	and	#$0F
	sta	(_out)
	inc	_out
	bne	:+
	inc	_out+1
:
;
; *out++ = in[2] >> 4;
;
	txa
	lsr
	lsr
	lsr
	lsr
	sta	(_out)
	inc	_out
	bne	:+
	inc	_out+1
:
;
; *out++ = in[3] & 15;
;
	iny
	lda	(_in),y
	tax
	and	#$0F
	sta	(_out)
	inc	_out
	bne	:+
	inc	_out+1
:
;
; *out++ = in[3] >> 4;
;
	txa
	lsr
	lsr
	lsr
	lsr
	sta	(_out)
	inc	_out
	bne	:+
	inc	_out+1
:
;
; in += 4;
;
	lda     #$04
	clc
	adc     _in
	sta     _in
	bcc     L0060
	inc     _in+1
;
; for (i = 0; i < 8; i++) {
;
L0060:	inc     _i
	lsr	_val
	jmp     L005F
;
; return in - orig;
;
L0010:	lda     _in
	sec
	sbc     _orig
	ldx     #$00

	rts

.endproc

